/*
    Tanzir Ahmed
    Department of Computer Science & Engineering
    Texas A&M University
    Date  : 2/8/20
 */
#include "common.h"
#include "FIFOreqchannel.h"

using namespace std;


int main(int argc, char *argv[]){
    FIFORequestChannel chan ("control", FIFORequestChannel::CLIENT_SIDE);
	
	int opt;
	int p = 1;
	double t = 0.0;
	int e = 1;
	bool psel, tsel, esel, fsel = false;
	
	string filename = "";
	while ((opt = getopt(argc, argv, "p:t:e:f:")) != -1) {
		switch (opt) {
			case 'p':
				p = atoi (optarg);
				psel = true;
				break;
			case 't':
				t = atof (optarg);
				tsel = true;
				break;
			case 'e':
				e = atoi (optarg);
				esel = true;
				break;
			case 'f':
				filename = optarg;
				fsel = true;
				break;
		}
	}
	
    // sending a non-sense message, you need to change this
    char buf [MAX_MESSAGE]; // 256
    if (psel && !(esel && fsel && tsel)) {
	ofstream fs("x1.csv");
	int person = p;
	int ecgnum = 1;
	struct timeval t0;
	struct timeval t1;
	gettimeofday(&t0, NULL);
	for (int i = 0; i < 1000; i++) {
		double timept = 0.004*i;
		datamsg ptmsg1 (person, timept, 1);
		datamsg ptmsg2 (person, timept, 2);
		double pt1;
		double pt2;
		chan.cwrite(&ptmsg1, sizeof (datamsg));
		chan.cread(&pt1, sizeof(double));
		chan.cwrite(&ptmsg2, sizeof (datamsg));
		chan.cread(&pt2, sizeof(double));

		if (!fs.is_open()) {
			cout << "Something went wrong opening x1.csv" << endl;
			return 1;
		}
		fs << timept << "," << pt1 << "," << pt2 << endl;

		//cout << "(t, pt1, pt2): " << "(" << timept << "," << pt1 << "," << pt2 << ")" << endl;
	}	
	gettimeofday(&t1, NULL);
	cout << "The transfer took " << t1 - t0 << " seconds." << endl;
    }
    datamsg x (p, t, e);
	
	chan.cwrite (&x, sizeof (datamsg)); // question
	double reply;
	int nbytes = chan.cread (&reply, sizeof(double)); //answer
	cout << "For person " << p <<", at time " << t << ", the value of ecg "<< e <<" is " << reply << endl;
	
	

	filemsg fm (0,0);
	string fname = "teslkansdlkjflasjdf.dat";
	
	int len = sizeof (filemsg) + fname.size()+1;
	char buf2 [len];
	memcpy (buf2, &fm, sizeof (filemsg));
	strcpy (buf2 + sizeof (filemsg), fname.c_str());
	chan.cwrite (buf2, len);  // I want the file length;
	
	
	// closing the channel    
    MESSAGE_TYPE m = QUIT_MSG;
    chan.cwrite (&m, sizeof (MESSAGE_TYPE));
}
